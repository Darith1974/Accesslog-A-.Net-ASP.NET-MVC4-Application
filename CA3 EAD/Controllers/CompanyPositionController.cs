using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CA3_EAD.Models;

/* This controller is based on the CompanyPosition class generated by Entity Framework to mimic the CompanyPosition table in my 
 * database using the datacontext string : EmployeeDatabase db = new EmployeeDatabase(). This is not a empty controller but
 * a template for a mvc an controller with read/write views to an Entity framework. Thee are eight to nine methods which return 
 * a type ActionResult. Theses methods are called by different events on the user Interface, which in these systems is handled 
 * by the views. Please refer to each of the cs files in views for an explanation of these. This version of asp.net mvc will
 * route all execution requests by the url. These requests are handled by the RouterConfig.cs. So the user requests //localhost:
 * XXXX/CompanyPosition,the request is routed to this controller which will automatically route to the Index() method.
 * this method will call a view. Please now refer index.chtml within the CompanyPosition folder of Views. Next we have the Details
 * which starts by retreiving the CompanyPosition Object of the entiy model relevant to the Id provided by using a linq statement.
 * Provided, it is not null; return the specified view. * The 'Create' action returns the create view while the 'Create' action 
 * which takes a CompanyPosition object as input is the create button on the page. There is a if statement which checks a attribute
 * of the ModelState object. This statement checks that the data entered into the user interface is valid.
 * The first edit method returns the view while the second edit method corresponds to saving the edited version of that 
 * CompanyPosition. Notice that [HttpPost] is placed above the function to signify the post action involved. Then there is the
 * two delete actions. The first returns the view while the second will delete the entry in the table in question. This action
 * finds the relevant entity object by linq, then the next line deletes it;then the changes are saved and finally we
 * have a redirect to the index action. Entity framework handles the interacion with the actual database.
 * 
 */

namespace CA3_EAD.Controllers
{
    public class CompanyPositionController : Controller
    {
        private EmployeeDatabase db = new EmployeeDatabase();

        //
        // GET: /CompanyPosition/

        public ActionResult Index()
        {
            return View(db.CompanyPositions.ToList());
        }

        //
        // GET: /CompanyPosition/Details/5

        public ActionResult Details(int id = 0)
        {
            CompanyPosition companyposition = db.CompanyPositions.Single(c => c.GradeID == id);
            if (companyposition == null)
            {
                return HttpNotFound();
            }
            return View(companyposition);
        }

        //
        // GET: /CompanyPosition/Create

        public ActionResult Create()
        {
            return View();
        }

        //
        // POST: /CompanyPosition/Create

        [HttpPost]
        public ActionResult Create(CompanyPosition companyposition)
        {
            if (ModelState.IsValid)
            {
                db.CompanyPositions.AddObject(companyposition);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(companyposition);
        }

        //
        // GET: /CompanyPosition/Edit/5

        public ActionResult Edit(int id = 0)
        {
            CompanyPosition companyposition = db.CompanyPositions.Single(c => c.GradeID == id);
            if (companyposition == null)
            {
                return HttpNotFound();
            }
            return View(companyposition);
        }

        //
        // POST: /CompanyPosition/Edit/5

        [HttpPost]
        public ActionResult Edit(CompanyPosition companyposition)
        {
            if (ModelState.IsValid)
            {
                db.CompanyPositions.Attach(companyposition);
                db.ObjectStateManager.ChangeObjectState(companyposition, EntityState.Modified);
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(companyposition);
        }

        //
        // GET: /CompanyPosition/Delete/5

        public ActionResult Delete(int id = 0)
        {
            CompanyPosition companyposition = db.CompanyPositions.Single(c => c.GradeID == id);
            if (companyposition == null)
            {
                return HttpNotFound();
            }
            return View(companyposition);
        }

        //
        // POST: /CompanyPosition/Delete/5

        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(int id)
        {
            CompanyPosition companyposition = db.CompanyPositions.Single(c => c.GradeID == id);
            db.CompanyPositions.DeleteObject(companyposition);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }
}